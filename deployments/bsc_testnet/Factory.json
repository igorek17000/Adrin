{
  "address": "0x8007e3Dd9600c8F21834c4314041bBAb34757031",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "agreementAddress",
          "type": "address"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OperatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OperatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "voters",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableCoinAddress",
          "type": "address"
        }
      ],
      "name": "deployNewAgreement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff63bbfd4790b5051d75fb89fa8a969fbf40fb5371c39da32d1e33701176a3dd",
  "receipt": {
    "to": null,
    "from": "0x94DCbbEe27fDb765D1Ef47E6aF3B782988afd7De",
    "contractAddress": "0x8007e3Dd9600c8F21834c4314041bBAb34757031",
    "transactionIndex": 2,
    "gasUsed": "2566408",
    "logsBloom": "0x
    "blockHash": "0x381df9c684dbe38dd0b994d759c8e0af008be19f91aed1a45863175c3422765e",
    "transactionHash": "0xff63bbfd4790b5051d75fb89fa8a969fbf40fb5371c39da32d1e33701176a3dd",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 19667030,
        "transactionHash": "0xff63bbfd4790b5051d75fb89fa8a969fbf40fb5371c39da32d1e33701176a3dd",
        "address": "0x8007e3Dd9600c8F21834c4314041bBAb34757031",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000094dcbbee27fdb765d1ef47e6af3b782988afd7de"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x381df9c684dbe38dd0b994d759c8e0af008be19f91aed1a45863175c3422765e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 19667030,
        "transactionHash": "0xff63bbfd4790b5051d75fb89fa8a969fbf40fb5371c39da32d1e33701176a3dd",
        "address": "0x8007e3Dd9600c8F21834c4314041bBAb34757031",
        "topics": [
          "0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d",
          "0x00000000000000000000000094dcbbee27fdb765d1ef47e6af3b782988afd7de"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x381df9c684dbe38dd0b994d759c8e0af008be19f91aed1a45863175c3422765e"
      }
    ],
    "blockNumber": 19667030,
    "cumulativeGasUsed": "2783768",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "08952ca5620535ed7d9b63658042ba21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agreementAddress\",\"type\":\"address\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoinAddress\",\"type\":\"address\"}],\"name\":\"deployNewAgreement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Agreement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ERC20Token.sol\\\";\\nimport \\\"./Role/Governable.sol\\\";\\n\\ncontract Agreement is Governable {\\n    using SafeMath for uint256;\\n\\n    event TokenCreated(address tokenAddress);\\n    event Unlocked();\\n\\n    ERC20Token public token;\\n    IERC20 public stableCoin;\\n    uint256 public quorum;\\n    uint256 public votes;\\n    uint256 public deadline;\\n    uint256 public maxDelay;\\n    uint256 public profitRate = 10000;\\n    bool public locked = true;\\n    mapping(address => bool) public hasVoted;\\n\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 initialSupply,\\n        address deployer,\\n        uint256 _quorum,\\n        address[] memory _operators,\\n        uint256 _maxDelay,\\n        address _stableCoin\\n    ) {\\n        require(_quorum > 0, \\\"number of needed witnesses must be greater than zero\\\");\\n        require(_quorum <= _operators.length, \\\"quorum must be less than or equal to number of operators\\\");\\n\\n        token = new ERC20Token(\\n            name,\\n            symbol,\\n            decimals,\\n            initialSupply,\\n            deployer\\n        );\\n\\n        stableCoin = IERC20(address(_stableCoin));\\n        quorum = _quorum;\\n        maxDelay = _maxDelay;\\n        for (uint i = 0; i < _operators.length; i++)\\n            _addOperator(_operators[i]);\\n\\n        transferOwnership(deployer);\\n        emit TokenCreated(address(token));\\n    }\\n\\n    function castVote() public onlyOperator {\\n        require(hasVoted[msg.sender] == false, \\\"already voted\\\");\\n        require(locked == true, \\\"tokens are already unlocked\\\");\\n\\n        hasVoted[msg.sender] = true;\\n        votes++;\\n        if (votes >= quorum) {\\n            locked = false;\\n            deadline = block.timestamp + (maxDelay * 1 days);\\n            emit Unlocked();\\n        }\\n    }\\n\\n    function recieveProfit(address _to) public {\\n        require(locked == false, \\\"project is not finished yet\\\");\\n        require(block.timestamp <= deadline, \\\"project deadline is passed\\\");\\n\\n        uint256 balance = token.balanceOf(msg.sender);\\n        token.transferFrom(msg.sender, address(this), balance);\\n        stableCoin.transfer(_to, balance.mul(profitRate).div(10000));\\n    }\\n\\n    function setProfitRate (uint256 rate) public onlyOwner () {\\n        require(rate >= 10000, \\\"rate / 10000 must be at least equal to one\\\");\\n        profitRate = rate;\\n    }\\n\\n    function increaseDeadline (uint256 delayTimeInDays) public onlyOwner () {\\n        deadline += (delayTimeInDays * 1 days);\\n    }\\n\\n    function discharge (address _to) public onlyOwner () {\\n        uint256 balance = stableCoin.balanceOf(address(this));\\n        stableCoin.transfer(_to, balance);\\n    }\\n}\",\"keccak256\":\"0xde81c3fdea287e9bd1c5daefb05c9aca836af7371e17cc1d5fdce9680e608720\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Token is ERC20 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 initialSupply,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        _mint(owner, initialSupply * 10**uint256(decimals));\\n    }\\n}\",\"keccak256\":\"0x67a53a4c9f88db1459241950dbf087a84230ea285c8d054d031b5ab248488a08\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"./Agreement.sol\\\";\\nimport \\\"./Role/Governable.sol\\\";\\n\\ncontract Factory is Governable {\\n    event AgreementCreated(address agreementAddress);\\n\\n    function deployNewAgreement(\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimals,\\n        uint256 initialSupply,\\n        uint256 quorum,\\n        address[] memory voters,\\n        uint256 maxDelay,\\n        address stableCoinAddress\\n    ) public onlyOperator returns (address)  {\\n        Agreement t = new Agreement(\\n            name,\\n            symbol,\\n            decimals,\\n            initialSupply,\\n            msg.sender,\\n            quorum,\\n            voters,\\n            maxDelay,\\n            stableCoinAddress\\n        );\\n        emit AgreementCreated(address(t));\\n\\n        return address(t);\\n    }\\n\\n    function addOperator (address account) public onlyOwner {\\n         _addOperator(account);\\n    }\\n\\n    function removeOperator (address account) public onlyOwner {\\n         _removeOperator(account);\\n    }\\n}\",\"keccak256\":\"0x88e53e3c3c3c04a19cf9e7401fe5fb03cfdca3352234d47fa91c2dfbde65416a\",\"license\":\"MIT\"},\"contracts/Role/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Governable is Context, Ownable {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    constructor() {\\n        if (!isOperator(_msgSender())) {\\n            _addOperator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            isOperator(_msgSender()),\\n            \\\"OperatorRole: caller does not have the Operator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    // function renounceOperator() public {\\n    //     _removeOperator(_msgSender());\\n    // }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x19338ddb0f2ad73ff19d75a2056d852ed1653eb25d13cd70a2a97a1ff30dd1fa\",\"license\":\"UNLICENSED\"},\"contracts/Role/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0x879ee5db8347ae0143ae7f8fec48b8f338cc1c09086c5091d5ade04606602e9a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610035565b61002333610085565b61003057610030336100a5565b6101f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061009f8260016100f460201b6103c61790919060201c565b92915050565b6100bd81600161017c60201b61044b1790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b60006001600160a01b03821661015c5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61018682826100f4565b156101d35760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610153565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b612c90806102076000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80638da5cb5b11620000625780638da5cb5b14620000f45780639870d7fe1462000106578063ac8a584a146200011d578063f2fde38b146200013457600080fd5b80630f8c017f146200008c5780636d70f7ae14620000c0578063715018a614620000e8575b600080fd5b620000a36200009d36600462000776565b6200014b565b6040516001600160a01b0390911681526020015b60405180910390f35b620000d7620000d136600462000859565b62000264565b6040519015158152602001620000b7565b620000f262000279565b005b6000546001600160a01b0316620000a3565b620000f26200011736600462000859565b620002b4565b620000f26200012e36600462000859565b620002ef565b620000f26200014536600462000859565b62000327565b6000620001583362000264565b620001c75760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b60648201526084015b60405180910390fd5b60008b8b8b8b8b8b338c8c8c8c604051620001e29062000629565b620001f89b9a99989796959493929190620008a7565b604051809103906000f08015801562000215573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f61c638779dc87761c9f1c14684efec1860715f51623c3cb9a3d27f7cf51c76939060200160405180910390a19b9a5050505050505050505050565b600062000273600183620003c6565b92915050565b6000546001600160a01b03163314620002a65760405162461bcd60e51b8152600401620001be906200096f565b620002b26000620004cb565b565b6000546001600160a01b03163314620002e15760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200051b565b50565b6000546001600160a01b031633146200031c5760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200055f565b6000546001600160a01b03163314620003545760405162461bcd60e51b8152600401620001be906200096f565b6001600160a01b038116620003bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001be565b620002ec81620004cb565b60006001600160a01b0382166200042b5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620001be565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004578282620003c6565b15620004a65760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005286001826200044b565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6200056c600182620005a3565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b620005af8282620003c6565b620006075760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6122b680620009a583390190565b60008083601f8401126200064a57600080fd5b50813567ffffffffffffffff8111156200066357600080fd5b6020830191508360208285010111156200067c57600080fd5b9250929050565b803560ff811681146200069557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146200069557600080fd5b600082601f830112620006da57600080fd5b8135602067ffffffffffffffff80831115620006fa57620006fa6200069a565b8260051b604051601f19603f830116810181811084821117156200072257620007226200069a565b6040529384528581018301938381019250878511156200074157600080fd5b83870191505b848210156200076b576200075b82620006b0565b8352918301919083019062000747565b979650505050505050565b6000806000806000806000806000806101008b8d0312156200079757600080fd5b8a3567ffffffffffffffff80821115620007b057600080fd5b620007be8e838f0162000637565b909c509a5060208d0135915080821115620007d857600080fd5b620007e68e838f0162000637565b909a509850889150620007fc60408e0162000683565b975060608d0135965060808d0135955060a08d01359150808211156200082157600080fd5b50620008308d828e01620006c8565b93505060c08b013591506200084860e08c01620006b0565b90509295989b9194979a5092959850565b6000602082840312156200086c57600080fd5b6200087782620006b0565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61012081526000620008bf61012083018d8f6200087e565b8281036020840152620008d4818c8e6200087e565b60ff8b166040850152606084018a90526001600160a01b03898116608086015260a0850189905284820360c086015287518083526020808a0194509192919091019060005b818110156200093b578451841683526020948501949092019160010162000919565b505060e085018790526001600160a01b03861661010086015292506200095f915050565b9c9b505050505050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60806040526127106008556009805460ff191660011790553480156200002457600080fd5b50604051620022b6380380620022b68339810160408190526200004791620006df565b620000523362000286565b6200005d33620002d6565b6200006d576200006d33620002f9565b60008411620000e95760405162461bcd60e51b815260206004820152603460248201527f6e756d626572206f66206e6565646564207769746e6573736573206d7573742060448201527f62652067726561746572207468616e207a65726f00000000000000000000000060648201526084015b60405180910390fd5b8251841115620001625760405162461bcd60e51b815260206004820152603860248201527f71756f72756d206d757374206265206c657373207468616e206f72206571756160448201527f6c20746f206e756d626572206f66206f70657261746f727300000000000000006064820152608401620000e0565b8888888888604051620001759062000521565b62000185959493929190620007f4565b604051809103906000f080158015620001a2573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b0393841617909155600380549091169183169190911790556004849055600782905560005b83518110156200022b576200021684828151811062000202576200020262000847565b6020026020010151620002f960201b60201c565b8062000222816200085d565b915050620001df565b5062000237856200034b565b6002546040516001600160a01b0390911681527f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e9060200160405180910390a150505050505050505062000887565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002f38260016200041c60201b620009221790919060201c565b92915050565b62000314816001620004a160201b620009a51790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6000546001600160a01b03163314620003a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000e0565b6001600160a01b0381166200040e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000e0565b620004198162000286565b50565b60006001600160a01b038216620004815760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620000e0565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004ad82826200041c565b15620004fc5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620000e0565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b610e1d806200149983390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200057057620005706200052f565b604052919050565b60005b83811015620005955781810151838201526020016200057b565b83811115620005a5576000848401525b50505050565b600082601f830112620005bd57600080fd5b81516001600160401b03811115620005d957620005d96200052f565b620005ee601f8201601f191660200162000545565b8181528460208386010111156200060457600080fd5b6200061782602083016020870162000578565b949350505050565b805160ff811681146200063157600080fd5b919050565b80516001600160a01b03811681146200063157600080fd5b600082601f8301126200066057600080fd5b815160206001600160401b038211156200067e576200067e6200052f565b8160051b6200068f82820162000545565b9283528481018201928281019087851115620006aa57600080fd5b83870192505b84831015620006d457620006c48362000636565b82529183019190830190620006b0565b979650505050505050565b60008060008060008060008060006101208a8c031215620006ff57600080fd5b89516001600160401b03808211156200071757600080fd5b620007258d838e01620005ab565b9a5060208c01519150808211156200073c57600080fd5b6200074a8d838e01620005ab565b99506200075a60408d016200061f565b985060608c015197506200077160808d0162000636565b965060a08c0151955060c08c01519150808211156200078f57600080fd5b506200079e8c828d016200064e565b93505060e08a01519150620007b76101008b0162000636565b90509295985092959850929598565b60008151808452620007e081602086016020860162000578565b601f01601f19169290920160200192915050565b60a0815260006200080960a0830188620007c6565b82810360208401526200081d8188620007c6565b60ff969096166040840152505060608101929092526001600160a01b031660809091015292915050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200088057634e487b7160e01b600052601160045260246000fd5b5060010190565b610c0280620008976000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063e168c3ec11610071578063e168c3ec1461021f578063ed49d2f814610228578063eda4260414610231578063f2fde38b14610244578063fc0c546a1461025757600080fd5b80638da5cb5b146101c7578063992642e5146101ec57806399bb4c73146101ff578063cf3090121461021257600080fd5b806329dcb0cf116100e957806329dcb0cf146101875780636388749c146101905780636d70f7ae14610199578063715018a6146101ac578063736e66b9146101b457600080fd5b80630231853a1461011b57806309eef43e146101305780630fb524ce146101685780631703a01814610170575b600080fd5b61012e610129366004610a90565b61026a565b005b61015361013e366004610a90565b600a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012e6103a7565b61017960045481565b60405190815260200161015f565b61017960065481565b61017960085481565b6101536101a7366004610a90565b61054b565b61012e61055e565b61012e6101c2366004610ab9565b610592565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161015f565b6003546101d4906001600160a01b031681565b61012e61020d366004610a90565b6105e2565b6009546101539060ff1681565b61017960055481565b61017960075481565b61012e61023f366004610ab9565b6107f3565b61012e610252366004610a90565b610887565b6002546101d4906001600160a01b031681565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161029490610ad2565b60405180910390fd5b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610b07565b60035460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044015b602060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a29190610b20565b505050565b6103b03361054b565b6104195760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b6064820152608401610294565b336000908152600a602052604090205460ff16156104695760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481d9bdd1959609a1b6044820152606401610294565b60095460ff1615156001146104c05760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e732061726520616c726561647920756e6c6f636b656400000000006044820152606401610294565b336000908152600a60205260408120805460ff1916600117905560058054916104e883610b58565b919050555060045460055410610549576009805460ff191690556007546105129062015180610b73565b61051c9042610b92565b6006556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a15b565b6000610558600183610922565b92915050565b6000546001600160a01b031633146105885760405162461bcd60e51b815260040161029490610ad2565b6105496000610a21565b6000546001600160a01b031633146105bc5760405162461bcd60e51b815260040161029490610ad2565b6105c98162015180610b73565b600660008282546105da9190610b92565b909155505050565b60095460ff16156106355760405162461bcd60e51b815260206004820152601b60248201527f70726f6a656374206973206e6f742066696e69736865642079657400000000006044820152606401610294565b6006544211156106875760405162461bcd60e51b815260206004820152601a60248201527f70726f6a65637420646561646c696e65206973207061737365640000000000006044820152606401610294565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610b07565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610b20565b506003546008546001600160a01b039091169063a9059cbb9084906107c290612710906107bc908790610a71565b90610a84565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610350565b6000546001600160a01b0316331461081d5760405162461bcd60e51b815260040161029490610ad2565b6127108110156108825760405162461bcd60e51b815260206004820152602a60248201527f72617465202f203130303030206d757374206265206174206c6561737420657160448201526975616c20746f206f6e6560b01b6064820152608401610294565b600855565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260040161029490610ad2565b6001600160a01b0381166109165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610294565b61091f81610a21565b50565b60006001600160a01b0382166109855760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610294565b506001600160a01b03166000908152602091909152604090205460ff1690565b6109af8282610922565b156109fc5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610294565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610a7d8284610b73565b9392505050565b6000610a7d8284610baa565b600060208284031215610aa257600080fd5b81356001600160a01b0381168114610a7d57600080fd5b600060208284031215610acb57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610b1957600080fd5b5051919050565b600060208284031215610b3257600080fd5b81518015158114610a7d57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b6c57610b6c610b42565b5060010190565b6000816000190483118215151615610b8d57610b8d610b42565b500290565b60008219821115610ba557610ba5610b42565b500190565b600082610bc757634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c6039537f1d681d2baffb4da17fdb86625915ac942a14b3af7e2c466ee4c27e064736f6c6343000809003360806040523480156200001157600080fd5b5060405162000e1d38038062000e1d8339810160408190526200003491620002f5565b8451859085906200004d90600390602085019062000182565b5080516200006390600490602084019062000182565b5050506200008f818460ff16600a6200007d9190620004ba565b620000899085620004cf565b6200009a565b505050505062000549565b6001600160a01b038216620000f55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001099190620004f1565b90915550506001600160a01b0382166000908152602081905260408120805483929062000138908490620004f1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b82805462000190906200050c565b90600052602060002090601f016020900481019282620001b45760008555620001ff565b82601f10620001cf57805160ff1916838001178555620001ff565b82800160010185558215620001ff579182015b82811115620001ff578251825591602001919060010190620001e2565b506200020d92915062000211565b5090565b5b808211156200020d576000815560010162000212565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025057600080fd5b81516001600160401b03808211156200026d576200026d62000228565b604051601f8301601f19908116603f0116810190828211818310171562000298576200029862000228565b81604052838152602092508683858801011115620002b557600080fd5b600091505b83821015620002d95785820183015181830184015290820190620002ba565b83821115620002eb5760008385830101525b9695505050505050565b600080600080600060a086880312156200030e57600080fd5b85516001600160401b03808211156200032657600080fd5b6200033489838a016200023e565b965060208801519150808211156200034b57600080fd5b506200035a888289016200023e565b945050604086015160ff811681146200037257600080fd5b6060870151608088015191945092506001600160a01b03811681146200039757600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003fc578160001904821115620003e057620003e0620003a5565b80851615620003ee57918102915b93841c9390800290620003c0565b509250929050565b6000826200041557506001620004b4565b816200042457506000620004b4565b81600181146200043d5760028114620004485762000468565b6001915050620004b4565b60ff8411156200045c576200045c620003a5565b50506001821b620004b4565b5060208310610133831016604e8410600b84101617156200048d575081810a620004b4565b620004998383620003bb565b8060001904821115620004b057620004b0620003a5565b0290505b92915050565b6000620004c8838362000404565b9392505050565b6000816000190483118215151615620004ec57620004ec620003a5565b500290565b60008219821115620005075762000507620003a5565b500190565b600181811c908216806200052157607f821691505b602082108114156200054357634e487b7160e01b600052602260045260246000fd5b50919050565b6108c480620005596000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610701565b60405180910390f35b6100df6100da366004610772565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b61026e565b604051601281526020016100c3565b6100df610131366004610772565b61031d565b6100f36101443660046107d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df610175366004610772565b610368565b6100df610188366004610772565b610401565b6100f361019b3660046107fa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061082d565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061082d565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610868565b61040e565b6060600480546101d59061082d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610868565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561072e57858101830151858201604001528201610712565b81811115610740576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b9150604084013590509250925092565b6000602082840312156107ea57600080fd5b6107f382610756565b9392505050565b6000806040838503121561080d57600080fd5b61081683610756565b915061082460208401610756565b90509250929050565b600181811c9082168061084157607f821691505b6020821081141561086257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212201e284ce0b1c21346a299bb405335e567cee36dc1e9978affc8d9f2746ec56a8f64736f6c63430008090033a2646970667358221220ff6538ce2d255f377e21dc595a887ea035fee3cc0351bf2d05ca0cf2af9257c164736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000875760003560e01c80638da5cb5b11620000625780638da5cb5b14620000f45780639870d7fe1462000106578063ac8a584a146200011d578063f2fde38b146200013457600080fd5b80630f8c017f146200008c5780636d70f7ae14620000c0578063715018a614620000e8575b600080fd5b620000a36200009d36600462000776565b6200014b565b6040516001600160a01b0390911681526020015b60405180910390f35b620000d7620000d136600462000859565b62000264565b6040519015158152602001620000b7565b620000f262000279565b005b6000546001600160a01b0316620000a3565b620000f26200011736600462000859565b620002b4565b620000f26200012e36600462000859565b620002ef565b620000f26200014536600462000859565b62000327565b6000620001583362000264565b620001c75760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b60648201526084015b60405180910390fd5b60008b8b8b8b8b8b338c8c8c8c604051620001e29062000629565b620001f89b9a99989796959493929190620008a7565b604051809103906000f08015801562000215573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f61c638779dc87761c9f1c14684efec1860715f51623c3cb9a3d27f7cf51c76939060200160405180910390a19b9a5050505050505050505050565b600062000273600183620003c6565b92915050565b6000546001600160a01b03163314620002a65760405162461bcd60e51b8152600401620001be906200096f565b620002b26000620004cb565b565b6000546001600160a01b03163314620002e15760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200051b565b50565b6000546001600160a01b031633146200031c5760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200055f565b6000546001600160a01b03163314620003545760405162461bcd60e51b8152600401620001be906200096f565b6001600160a01b038116620003bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001be565b620002ec81620004cb565b60006001600160a01b0382166200042b5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620001be565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004578282620003c6565b15620004a65760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005286001826200044b565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6200056c600182620005a3565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b620005af8282620003c6565b620006075760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6122b680620009a583390190565b60008083601f8401126200064a57600080fd5b50813567ffffffffffffffff8111156200066357600080fd5b6020830191508360208285010111156200067c57600080fd5b9250929050565b803560ff811681146200069557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146200069557600080fd5b600082601f830112620006da57600080fd5b8135602067ffffffffffffffff80831115620006fa57620006fa6200069a565b8260051b604051601f19603f830116810181811084821117156200072257620007226200069a565b6040529384528581018301938381019250878511156200074157600080fd5b83870191505b848210156200076b576200075b82620006b0565b8352918301919083019062000747565b979650505050505050565b6000806000806000806000806000806101008b8d0312156200079757600080fd5b8a3567ffffffffffffffff80821115620007b057600080fd5b620007be8e838f0162000637565b909c509a5060208d0135915080821115620007d857600080fd5b620007e68e838f0162000637565b909a509850889150620007fc60408e0162000683565b975060608d0135965060808d0135955060a08d01359150808211156200082157600080fd5b50620008308d828e01620006c8565b93505060c08b013591506200084860e08c01620006b0565b90509295989b9194979a5092959850565b6000602082840312156200086c57600080fd5b6200087782620006b0565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61012081526000620008bf61012083018d8f6200087e565b8281036020840152620008d4818c8e6200087e565b60ff8b166040850152606084018a90526001600160a01b03898116608086015260a0850189905284820360c086015287518083526020808a0194509192919091019060005b818110156200093b578451841683526020948501949092019160010162000919565b505060e085018790526001600160a01b03861661010086015292506200095f915050565b9c9b505050505050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60806040526127106008556009805460ff191660011790553480156200002457600080fd5b50604051620022b6380380620022b68339810160408190526200004791620006df565b620000523362000286565b6200005d33620002d6565b6200006d576200006d33620002f9565b60008411620000e95760405162461bcd60e51b815260206004820152603460248201527f6e756d626572206f66206e6565646564207769746e6573736573206d7573742060448201527f62652067726561746572207468616e207a65726f00000000000000000000000060648201526084015b60405180910390fd5b8251841115620001625760405162461bcd60e51b815260206004820152603860248201527f71756f72756d206d757374206265206c657373207468616e206f72206571756160448201527f6c20746f206e756d626572206f66206f70657261746f727300000000000000006064820152608401620000e0565b8888888888604051620001759062000521565b62000185959493929190620007f4565b604051809103906000f080158015620001a2573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b0393841617909155600380549091169183169190911790556004849055600782905560005b83518110156200022b576200021684828151811062000202576200020262000847565b6020026020010151620002f960201b60201c565b8062000222816200085d565b915050620001df565b5062000237856200034b565b6002546040516001600160a01b0390911681527f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e9060200160405180910390a150505050505050505062000887565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002f38260016200041c60201b620009221790919060201c565b92915050565b62000314816001620004a160201b620009a51790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6000546001600160a01b03163314620003a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000e0565b6001600160a01b0381166200040e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000e0565b620004198162000286565b50565b60006001600160a01b038216620004815760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620000e0565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004ad82826200041c565b15620004fc5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620000e0565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b610e1d806200149983390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200057057620005706200052f565b604052919050565b60005b83811015620005955781810151838201526020016200057b565b83811115620005a5576000848401525b50505050565b600082601f830112620005bd57600080fd5b81516001600160401b03811115620005d957620005d96200052f565b620005ee601f8201601f191660200162000545565b8181528460208386010111156200060457600080fd5b6200061782602083016020870162000578565b949350505050565b805160ff811681146200063157600080fd5b919050565b80516001600160a01b03811681146200063157600080fd5b600082601f8301126200066057600080fd5b815160206001600160401b038211156200067e576200067e6200052f565b8160051b6200068f82820162000545565b9283528481018201928281019087851115620006aa57600080fd5b83870192505b84831015620006d457620006c48362000636565b82529183019190830190620006b0565b979650505050505050565b60008060008060008060008060006101208a8c031215620006ff57600080fd5b89516001600160401b03808211156200071757600080fd5b620007258d838e01620005ab565b9a5060208c01519150808211156200073c57600080fd5b6200074a8d838e01620005ab565b99506200075a60408d016200061f565b985060608c015197506200077160808d0162000636565b965060a08c0151955060c08c01519150808211156200078f57600080fd5b506200079e8c828d016200064e565b93505060e08a01519150620007b76101008b0162000636565b90509295985092959850929598565b60008151808452620007e081602086016020860162000578565b601f01601f19169290920160200192915050565b60a0815260006200080960a0830188620007c6565b82810360208401526200081d8188620007c6565b60ff969096166040840152505060608101929092526001600160a01b031660809091015292915050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200088057634e487b7160e01b600052601160045260246000fd5b5060010190565b610c0280620008976000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063e168c3ec11610071578063e168c3ec1461021f578063ed49d2f814610228578063eda4260414610231578063f2fde38b14610244578063fc0c546a1461025757600080fd5b80638da5cb5b146101c7578063992642e5146101ec57806399bb4c73146101ff578063cf3090121461021257600080fd5b806329dcb0cf116100e957806329dcb0cf146101875780636388749c146101905780636d70f7ae14610199578063715018a6146101ac578063736e66b9146101b457600080fd5b80630231853a1461011b57806309eef43e146101305780630fb524ce146101685780631703a01814610170575b600080fd5b61012e610129366004610a90565b61026a565b005b61015361013e366004610a90565b600a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012e6103a7565b61017960045481565b60405190815260200161015f565b61017960065481565b61017960085481565b6101536101a7366004610a90565b61054b565b61012e61055e565b61012e6101c2366004610ab9565b610592565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161015f565b6003546101d4906001600160a01b031681565b61012e61020d366004610a90565b6105e2565b6009546101539060ff1681565b61017960055481565b61017960075481565b61012e61023f366004610ab9565b6107f3565b61012e610252366004610a90565b610887565b6002546101d4906001600160a01b031681565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161029490610ad2565b60405180910390fd5b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610b07565b60035460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044015b602060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a29190610b20565b505050565b6103b03361054b565b6104195760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b6064820152608401610294565b336000908152600a602052604090205460ff16156104695760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481d9bdd1959609a1b6044820152606401610294565b60095460ff1615156001146104c05760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e732061726520616c726561647920756e6c6f636b656400000000006044820152606401610294565b336000908152600a60205260408120805460ff1916600117905560058054916104e883610b58565b919050555060045460055410610549576009805460ff191690556007546105129062015180610b73565b61051c9042610b92565b6006556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a15b565b6000610558600183610922565b92915050565b6000546001600160a01b031633146105885760405162461bcd60e51b815260040161029490610ad2565b6105496000610a21565b6000546001600160a01b031633146105bc5760405162461bcd60e51b815260040161029490610ad2565b6105c98162015180610b73565b600660008282546105da9190610b92565b909155505050565b60095460ff16156106355760405162461bcd60e51b815260206004820152601b60248201527f70726f6a656374206973206e6f742066696e69736865642079657400000000006044820152606401610294565b6006544211156106875760405162461bcd60e51b815260206004820152601a60248201527f70726f6a65637420646561646c696e65206973207061737365640000000000006044820152606401610294565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610b07565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610b20565b506003546008546001600160a01b039091169063a9059cbb9084906107c290612710906107bc908790610a71565b90610a84565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610350565b6000546001600160a01b0316331461081d5760405162461bcd60e51b815260040161029490610ad2565b6127108110156108825760405162461bcd60e51b815260206004820152602a60248201527f72617465202f203130303030206d757374206265206174206c6561737420657160448201526975616c20746f206f6e6560b01b6064820152608401610294565b600855565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260040161029490610ad2565b6001600160a01b0381166109165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610294565b61091f81610a21565b50565b60006001600160a01b0382166109855760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610294565b506001600160a01b03166000908152602091909152604090205460ff1690565b6109af8282610922565b156109fc5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610294565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610a7d8284610b73565b9392505050565b6000610a7d8284610baa565b600060208284031215610aa257600080fd5b81356001600160a01b0381168114610a7d57600080fd5b600060208284031215610acb57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610b1957600080fd5b5051919050565b600060208284031215610b3257600080fd5b81518015158114610a7d57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b6c57610b6c610b42565b5060010190565b6000816000190483118215151615610b8d57610b8d610b42565b500290565b60008219821115610ba557610ba5610b42565b500190565b600082610bc757634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c6039537f1d681d2baffb4da17fdb86625915ac942a14b3af7e2c466ee4c27e064736f6c6343000809003360806040523480156200001157600080fd5b5060405162000e1d38038062000e1d8339810160408190526200003491620002f5565b8451859085906200004d90600390602085019062000182565b5080516200006390600490602084019062000182565b5050506200008f818460ff16600a6200007d9190620004ba565b620000899085620004cf565b6200009a565b505050505062000549565b6001600160a01b038216620000f55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001099190620004f1565b90915550506001600160a01b0382166000908152602081905260408120805483929062000138908490620004f1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b82805462000190906200050c565b90600052602060002090601f016020900481019282620001b45760008555620001ff565b82601f10620001cf57805160ff1916838001178555620001ff565b82800160010185558215620001ff579182015b82811115620001ff578251825591602001919060010190620001e2565b506200020d92915062000211565b5090565b5b808211156200020d576000815560010162000212565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025057600080fd5b81516001600160401b03808211156200026d576200026d62000228565b604051601f8301601f19908116603f0116810190828211818310171562000298576200029862000228565b81604052838152602092508683858801011115620002b557600080fd5b600091505b83821015620002d95785820183015181830184015290820190620002ba565b83821115620002eb5760008385830101525b9695505050505050565b600080600080600060a086880312156200030e57600080fd5b85516001600160401b03808211156200032657600080fd5b6200033489838a016200023e565b965060208801519150808211156200034b57600080fd5b506200035a888289016200023e565b945050604086015160ff811681146200037257600080fd5b6060870151608088015191945092506001600160a01b03811681146200039757600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003fc578160001904821115620003e057620003e0620003a5565b80851615620003ee57918102915b93841c9390800290620003c0565b509250929050565b6000826200041557506001620004b4565b816200042457506000620004b4565b81600181146200043d5760028114620004485762000468565b6001915050620004b4565b60ff8411156200045c576200045c620003a5565b50506001821b620004b4565b5060208310610133831016604e8410600b84101617156200048d575081810a620004b4565b620004998383620003bb565b8060001904821115620004b057620004b0620003a5565b0290505b92915050565b6000620004c8838362000404565b9392505050565b6000816000190483118215151615620004ec57620004ec620003a5565b500290565b60008219821115620005075762000507620003a5565b500190565b600181811c908216806200052157607f821691505b602082108114156200054357634e487b7160e01b600052602260045260246000fd5b50919050565b6108c480620005596000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610701565b60405180910390f35b6100df6100da366004610772565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b61026e565b604051601281526020016100c3565b6100df610131366004610772565b61031d565b6100f36101443660046107d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df610175366004610772565b610368565b6100df610188366004610772565b610401565b6100f361019b3660046107fa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061082d565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061082d565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610868565b61040e565b6060600480546101d59061082d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610868565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561072e57858101830151858201604001528201610712565b81811115610740576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b9150604084013590509250925092565b6000602082840312156107ea57600080fd5b6107f382610756565b9392505050565b6000806040838503121561080d57600080fd5b61081683610756565b915061082460208401610756565b90509250929050565b600181811c9082168061084157607f821691505b6020821081141561086257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212201e284ce0b1c21346a299bb405335e567cee36dc1e9978affc8d9f2746ec56a8f64736f6c63430008090033a2646970667358221220ff6538ce2d255f377e21dc595a887ea035fee3cc0351bf2d05ca0cf2af9257c164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1542,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_operators",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Role)1624_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Role)1624_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 1623,
            "contract": "contracts/Factory.sol:Factory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}