{
  "address": "0x31ee76743c2B4b38b7441d5772aaa0516A0C6979",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "agreementAddress",
          "type": "address"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OperatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OperatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "voters",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableCoinAddress",
          "type": "address"
        }
      ],
      "name": "deployNewAgreement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d42129c5c659a044b1a42fabef3365924194c3fb266e8ebb5ec85780b761f85",
  "receipt": {
    "to": null,
    "from": "0xe17DC3BC085866514A7a65e3300fbc083241880f",
    "contractAddress": "0x31ee76743c2B4b38b7441d5772aaa0516A0C6979",
    "transactionIndex": 3,
    "gasUsed": "2644826",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000800000000000000000000000000000010000000008000000000200000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000a00000010000000000000000000000000400000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000001000000002000000000000000000000000000000000000000000000000",
    "blockHash": "0xc5624c1cf27434916f3e1d0b37f74e7d43161951d9b29be387fc3c996f2e4c3d",
    "transactionHash": "0x2d42129c5c659a044b1a42fabef3365924194c3fb266e8ebb5ec85780b761f85",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12319412,
        "transactionHash": "0x2d42129c5c659a044b1a42fabef3365924194c3fb266e8ebb5ec85780b761f85",
        "address": "0x31ee76743c2B4b38b7441d5772aaa0516A0C6979",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e17dc3bc085866514a7a65e3300fbc083241880f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc5624c1cf27434916f3e1d0b37f74e7d43161951d9b29be387fc3c996f2e4c3d"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12319412,
        "transactionHash": "0x2d42129c5c659a044b1a42fabef3365924194c3fb266e8ebb5ec85780b761f85",
        "address": "0x31ee76743c2B4b38b7441d5772aaa0516A0C6979",
        "topics": [
          "0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d",
          "0x000000000000000000000000e17dc3bc085866514a7a65e3300fbc083241880f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc5624c1cf27434916f3e1d0b37f74e7d43161951d9b29be387fc3c996f2e4c3d"
      }
    ],
    "blockNumber": 12319412,
    "cumulativeGasUsed": "2722921",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "914735fb589a57817345ffa0162b2f13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agreementAddress\",\"type\":\"address\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoinAddress\",\"type\":\"address\"}],\"name\":\"deployNewAgreement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Agreement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ERC20Token.sol\\\";\\nimport \\\"./Role/Governable.sol\\\";\\n\\ncontract Agreement is Governable {\\n    using SafeMath for uint256;\\n\\n    event TokenCreated(address tokenAddress);\\n    event VoteCasted(address voter);\\n    event Unlocked();\\n    event ProfitRateChanged(uint256 newRate);\\n    event DeadlineChanged(uint256 newDeadline);\\n\\n    ERC20Token public token;\\n    IERC20 public stableCoin;\\n    uint256 public quorum;\\n    uint256 public votes;\\n    uint256 public deadline;\\n    uint256 public maxDelay;\\n    uint256 public profitRate = 10000;\\n    bool public locked = true;\\n    mapping(address => bool) public hasVoted;\\n\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 initialSupply,\\n        address deployer,\\n        uint256 _quorum,\\n        address[] memory _operators,\\n        uint256 _maxDelay,\\n        address _stableCoin\\n    ) {\\n        require(_quorum > 0, \\\"Agreement: number of needed witnesses must be greater than zero\\\");\\n        require(_quorum <= _operators.length, \\\"Agreement: quorum must be less than or equal to number of operators\\\");\\n\\n        token = new ERC20Token(\\n            name,\\n            symbol,\\n            decimals,\\n            initialSupply,\\n            deployer\\n        );\\n\\n        stableCoin = IERC20(address(_stableCoin));\\n        quorum = _quorum;\\n        maxDelay = _maxDelay;\\n        for (uint i = 0; i < _operators.length; i++)\\n            _addOperator(_operators[i]);\\n\\n        transferOwnership(deployer);\\n        emit TokenCreated(address(token));\\n    }\\n\\n    function castVote() public onlyOperator {\\n        require(hasVoted[msg.sender] == false, \\\"Agreement: already voted\\\");\\n        require(locked == true, \\\"Agreement: tokens are already unlocked\\\");\\n\\n        emit VoteCasted(msg.sender);\\n        hasVoted[msg.sender] = true;\\n        votes++;\\n\\n        if (votes >= quorum) {\\n            locked = false;\\n            deadline = block.timestamp + (maxDelay * 1 days);\\n            emit Unlocked();\\n        }\\n    }\\n\\n    function receiveProfit(address _to) public {\\n        require(locked == false, \\\"Agreement: project is not finished yet\\\");\\n        require(block.timestamp <= deadline, \\\"Agreement: project deadline is passed\\\");\\n\\n        uint256 balance = token.balanceOf(msg.sender);\\n        token.transferFrom(msg.sender, address(this), balance);\\n        stableCoin.transfer(_to, balance.mul(profitRate).div(10000));\\n    }\\n\\n    function setProfitRate (uint256 rate) public onlyOwner () {\\n        require(rate >= 10000, \\\"Agreement: rate / 10000 must be at least equal to one\\\");\\n        profitRate = rate;\\n        emit ProfitRateChanged(rate);\\n    }\\n\\n    function increaseDeadline (uint256 delayTimeInDays) public onlyOwner () {\\n        require(locked == false, \\\"Agreement: project is not finished yet\\\");\\n        deadline += (delayTimeInDays * 1 days);\\n        emit DeadlineChanged(deadline);\\n    }\\n\\n    function discharge (address _to) public onlyOwner () {\\n        require(locked == false, \\\"Agreement: project is not finished yet\\\");\\n        require(block.timestamp > deadline, \\\"Agreement: project deadline is not passed yet\\\");\\n        uint256 balance = stableCoin.balanceOf(address(this));\\n        stableCoin.transfer(_to, balance);\\n    }\\n}\",\"keccak256\":\"0x00be46a51bd96725a5bf82ce25fa68c8170e992b19d373308be06c816cd0e8ef\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Token is ERC20 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 initialSupply,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        _mint(owner, initialSupply * 10**uint256(decimals));\\n    }\\n}\",\"keccak256\":\"0x67a53a4c9f88db1459241950dbf087a84230ea285c8d054d031b5ab248488a08\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"./Agreement.sol\\\";\\nimport \\\"./Role/Governable.sol\\\";\\n\\ncontract Factory is Governable {\\n    event AgreementCreated(address agreementAddress);\\n\\n    function deployNewAgreement(\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimals,\\n        uint256 initialSupply,\\n        uint256 quorum,\\n        address[] memory voters,\\n        uint256 maxDelay,\\n        address stableCoinAddress\\n    ) public onlyOperator returns (address)  {\\n        Agreement t = new Agreement(\\n            name,\\n            symbol,\\n            decimals,\\n            initialSupply,\\n            msg.sender,\\n            quorum,\\n            voters,\\n            maxDelay,\\n            stableCoinAddress\\n        );\\n        emit AgreementCreated(address(t));\\n\\n        return address(t);\\n    }\\n\\n    function addOperator (address account) public onlyOwner {\\n         _addOperator(account);\\n    }\\n\\n    function removeOperator (address account) public onlyOwner {\\n         _removeOperator(account);\\n    }\\n}\",\"keccak256\":\"0x88e53e3c3c3c04a19cf9e7401fe5fb03cfdca3352234d47fa91c2dfbde65416a\",\"license\":\"MIT\"},\"contracts/Role/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Governable is Context, Ownable {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    constructor() {\\n        if (!isOperator(_msgSender())) {\\n            _addOperator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            isOperator(_msgSender()),\\n            \\\"OperatorRole: caller does not have the Operator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    // function renounceOperator() public {\\n    //     _removeOperator(_msgSender());\\n    // }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x19338ddb0f2ad73ff19d75a2056d852ed1653eb25d13cd70a2a97a1ff30dd1fa\",\"license\":\"UNLICENSED\"},\"contracts/Role/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0x879ee5db8347ae0143ae7f8fec48b8f338cc1c09086c5091d5ade04606602e9a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610035565b61002333610085565b61003057610030336100a5565b6101f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061009f8260016100f460201b6103c61790919060201c565b92915050565b6100bd81600161017c60201b61044b1790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b60006001600160a01b03821661015c5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61018682826100f4565b156101d35760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610153565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b612df4806102076000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80638da5cb5b11620000625780638da5cb5b14620000f45780639870d7fe1462000106578063ac8a584a146200011d578063f2fde38b146200013457600080fd5b80630f8c017f146200008c5780636d70f7ae14620000c0578063715018a614620000e8575b600080fd5b620000a36200009d36600462000776565b6200014b565b6040516001600160a01b0390911681526020015b60405180910390f35b620000d7620000d136600462000859565b62000264565b6040519015158152602001620000b7565b620000f262000279565b005b6000546001600160a01b0316620000a3565b620000f26200011736600462000859565b620002b4565b620000f26200012e36600462000859565b620002ef565b620000f26200014536600462000859565b62000327565b6000620001583362000264565b620001c75760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b60648201526084015b60405180910390fd5b60008b8b8b8b8b8b338c8c8c8c604051620001e29062000629565b620001f89b9a99989796959493929190620008a7565b604051809103906000f08015801562000215573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f61c638779dc87761c9f1c14684efec1860715f51623c3cb9a3d27f7cf51c76939060200160405180910390a19b9a5050505050505050505050565b600062000273600183620003c6565b92915050565b6000546001600160a01b03163314620002a65760405162461bcd60e51b8152600401620001be906200096f565b620002b26000620004cb565b565b6000546001600160a01b03163314620002e15760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200051b565b50565b6000546001600160a01b031633146200031c5760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200055f565b6000546001600160a01b03163314620003545760405162461bcd60e51b8152600401620001be906200096f565b6001600160a01b038116620003bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001be565b620002ec81620004cb565b60006001600160a01b0382166200042b5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620001be565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004578282620003c6565b15620004a65760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005286001826200044b565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6200056c600182620005a3565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b620005af8282620003c6565b620006075760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b61241a80620009a583390190565b60008083601f8401126200064a57600080fd5b50813567ffffffffffffffff8111156200066357600080fd5b6020830191508360208285010111156200067c57600080fd5b9250929050565b803560ff811681146200069557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146200069557600080fd5b600082601f830112620006da57600080fd5b8135602067ffffffffffffffff80831115620006fa57620006fa6200069a565b8260051b604051601f19603f830116810181811084821117156200072257620007226200069a565b6040529384528581018301938381019250878511156200074157600080fd5b83870191505b848210156200076b576200075b82620006b0565b8352918301919083019062000747565b979650505050505050565b6000806000806000806000806000806101008b8d0312156200079757600080fd5b8a3567ffffffffffffffff80821115620007b057600080fd5b620007be8e838f0162000637565b909c509a5060208d0135915080821115620007d857600080fd5b620007e68e838f0162000637565b909a509850889150620007fc60408e0162000683565b975060608d0135965060808d0135955060a08d01359150808211156200082157600080fd5b50620008308d828e01620006c8565b93505060c08b013591506200084860e08c01620006b0565b90509295989b9194979a5092959850565b6000602082840312156200086c57600080fd5b6200087782620006b0565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61012081526000620008bf61012083018d8f6200087e565b8281036020840152620008d4818c8e6200087e565b60ff8b166040850152606084018a90526001600160a01b03898116608086015260a0850189905284820360c086015287518083526020808a0194509192919091019060005b818110156200093b578451841683526020948501949092019160010162000919565b505060e085018790526001600160a01b03861661010086015292506200095f915050565b9c9b505050505050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60806040526127106008556009805460ff191660011790553480156200002457600080fd5b506040516200241a3803806200241a8339810160408190526200004791620006eb565b620000523362000292565b6200005d33620002e2565b6200006d576200006d3362000305565b60008411620000e95760405162461bcd60e51b815260206004820152603f60248201527f41677265656d656e743a206e756d626572206f66206e6565646564207769746e60448201527f6573736573206d7573742062652067726561746572207468616e207a65726f0060648201526084015b60405180910390fd5b82518411156200016e5760405162461bcd60e51b815260206004820152604360248201527f41677265656d656e743a2071756f72756d206d757374206265206c657373207460448201527f68616e206f7220657175616c20746f206e756d626572206f66206f70657261746064820152626f727360e81b608482015260a401620000e0565b888888888860405162000181906200052d565b6200019195949392919062000800565b604051809103906000f080158015620001ae573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b0393841617909155600380549091169183169190911790556004849055600782905560005b83518110156200023757620002228482815181106200020e576200020e62000853565b60200260200101516200030560201b60201c565b806200022e8162000869565b915050620001eb565b50620002438562000357565b6002546040516001600160a01b0390911681527f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e9060200160405180910390a150505050505050505062000893565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002ff8260016200042860201b62000a711790919060201c565b92915050565b62000320816001620004ad60201b62000af41790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6000546001600160a01b03163314620003b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000e0565b6001600160a01b0381166200041a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000e0565b620004258162000292565b50565b60006001600160a01b0382166200048d5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620000e0565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004b9828262000428565b15620005085760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620000e0565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b610de0806200163a83390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200057c576200057c6200053b565b604052919050565b60005b83811015620005a157818101518382015260200162000587565b83811115620005b1576000848401525b50505050565b600082601f830112620005c957600080fd5b81516001600160401b03811115620005e557620005e56200053b565b620005fa601f8201601f191660200162000551565b8181528460208386010111156200061057600080fd5b6200062382602083016020870162000584565b949350505050565b805160ff811681146200063d57600080fd5b919050565b80516001600160a01b03811681146200063d57600080fd5b600082601f8301126200066c57600080fd5b815160206001600160401b038211156200068a576200068a6200053b565b8160051b6200069b82820162000551565b9283528481018201928281019087851115620006b657600080fd5b83870192505b84831015620006e057620006d08362000642565b82529183019190830190620006bc565b979650505050505050565b60008060008060008060008060006101208a8c0312156200070b57600080fd5b89516001600160401b03808211156200072357600080fd5b620007318d838e01620005b7565b9a5060208c01519150808211156200074857600080fd5b620007568d838e01620005b7565b99506200076660408d016200062b565b985060608c015197506200077d60808d0162000642565b965060a08c0151955060c08c01519150808211156200079b57600080fd5b50620007aa8c828d016200065a565b93505060e08a01519150620007c36101008b0162000642565b90509295985092959850929598565b60008151808452620007ec81602086016020860162000584565b601f01601f19169290920160200192915050565b60a0815260006200081560a0830188620007d2565b8281036020840152620008298188620007d2565b60ff969096166040840152505060608101929092526001600160a01b031660809091015292915050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200088c57634e487b7160e01b600052601160045260246000fd5b5060010190565b610d9780620008a36000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063736e66b9116100a2578063e168c3ec11610071578063e168c3ec1461021f578063ed49d2f814610228578063eda4260414610231578063f2fde38b14610244578063fc0c546a1461025757600080fd5b8063736e66b9146101c75780638da5cb5b146101da578063992642e5146101ff578063cf3090121461021257600080fd5b806329dcb0cf116100e957806329dcb0cf146101875780632ae85024146101905780636388749c146101a35780636d70f7ae146101ac578063715018a6146101bf57600080fd5b80630231853a1461011b57806309eef43e146101305780630fb524ce146101685780631703a01814610170575b600080fd5b61012e610129366004610bdf565b61026a565b005b61015361013e366004610bdf565b600a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012e610431565b61017960045481565b60405190815260200161015f565b61017960065481565b61012e61019e366004610bdf565b610627565b61017960085481565b6101536101ba366004610bdf565b610816565b61012e610829565b61012e6101d5366004610c08565b61085d565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161015f565b6003546101e7906001600160a01b031681565b6009546101539060ff1681565b61017960055481565b61017960075481565b61012e61023f366004610c08565b610907565b61012e610252366004610bdf565b6109d6565b6002546101e7906001600160a01b031681565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161029490610c21565b60405180910390fd5b60095460ff16156102c05760405162461bcd60e51b815260040161029490610c56565b60065442116103275760405162461bcd60e51b815260206004820152602d60248201527f41677265656d656e743a2070726f6a65637420646561646c696e65206973206e60448201526c1bdd081c185cdcd959081e595d609a1b6064820152608401610294565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561036b57600080fd5b505afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190610c9c565b60035460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044015b602060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610cb5565b505050565b61043a33610816565b6104a35760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b6064820152608401610294565b336000908152600a602052604090205460ff16156105035760405162461bcd60e51b815260206004820152601860248201527f41677265656d656e743a20616c726561647920766f74656400000000000000006044820152606401610294565b60095460ff1615156001146105695760405162461bcd60e51b815260206004820152602660248201527f41677265656d656e743a20746f6b656e732061726520616c726561647920756e6044820152651b1bd8dad95960d21b6064820152608401610294565b6040513381527f7ce969a18bb6b0fba42c6d9746e7d08eeca4c661809659c91d276456e3153ac09060200160405180910390a1336000908152600a60205260408120805460ff1916600117905560058054916105c483610ced565b919050555060045460055410610625576009805460ff191690556007546105ee9062015180610d08565b6105f89042610d27565b6006556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a15b565b60095460ff161561064a5760405162461bcd60e51b815260040161029490610c56565b6006544211156106aa5760405162461bcd60e51b815260206004820152602560248201527f41677265656d656e743a2070726f6a65637420646561646c696e652069732070604482015264185cdcd95960da1b6064820152608401610294565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610c9c565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190610cb5565b506003546008546001600160a01b039091169063a9059cbb9084906107e590612710906107df908790610b70565b90610b83565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016103da565b6000610823600183610a71565b92915050565b6000546001600160a01b031633146108535760405162461bcd60e51b815260040161029490610c21565b6106256000610b8f565b6000546001600160a01b031633146108875760405162461bcd60e51b815260040161029490610c21565b60095460ff16156108aa5760405162461bcd60e51b815260040161029490610c56565b6108b78162015180610d08565b600660008282546108c89190610d27565b90915550506006546040519081527f9113684b7f99581828413c80e8a4de06d7f9e1f19850a40671ff3cad16ed14ef906020015b60405180910390a150565b6000546001600160a01b031633146109315760405162461bcd60e51b815260040161029490610c21565b6127108110156109a15760405162461bcd60e51b815260206004820152603560248201527f41677265656d656e743a2072617465202f203130303030206d757374206265206044820152746174206c6561737420657175616c20746f206f6e6560581b6064820152608401610294565b60088190556040518181527f46c447fa0e09447aed33bdd5c9a904aefacaa21c929fd30091da12d5f9810949906020016108fc565b6000546001600160a01b03163314610a005760405162461bcd60e51b815260040161029490610c21565b6001600160a01b038116610a655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610294565b610a6e81610b8f565b50565b60006001600160a01b038216610ad45760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610294565b506001600160a01b03166000908152602091909152604090205460ff1690565b610afe8282610a71565b15610b4b5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610294565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6000610b7c8284610d08565b9392505050565b6000610b7c8284610d3f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610bf157600080fd5b81356001600160a01b0381168114610b7c57600080fd5b600060208284031215610c1a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526026908201527f41677265656d656e743a2070726f6a656374206973206e6f742066696e6973686040820152651959081e595d60d21b606082015260800190565b600060208284031215610cae57600080fd5b5051919050565b600060208284031215610cc757600080fd5b81518015158114610b7c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d0157610d01610cd7565b5060010190565b6000816000190483118215151615610d2257610d22610cd7565b500290565b60008219821115610d3a57610d3a610cd7565b500190565b600082610d5c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d4172a1417878ea7c751287dad0c512b6b1a60f498d95de3e2b29ee4b925125464736f6c6343000809003360806040523480156200001157600080fd5b5060405162000de038038062000de08339810160408190526200003491620002f5565b8451859085906200004d90600390602085019062000182565b5080516200006390600490602084019062000182565b5050506200008f818460ff16600a6200007d9190620004ba565b620000899085620004cf565b6200009a565b505050505062000549565b6001600160a01b038216620000f55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001099190620004f1565b90915550506001600160a01b0382166000908152602081905260408120805483929062000138908490620004f1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b82805462000190906200050c565b90600052602060002090601f016020900481019282620001b45760008555620001ff565b82601f10620001cf57805160ff1916838001178555620001ff565b82800160010185558215620001ff579182015b82811115620001ff578251825591602001919060010190620001e2565b506200020d92915062000211565b5090565b5b808211156200020d576000815560010162000212565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025057600080fd5b81516001600160401b03808211156200026d576200026d62000228565b604051601f8301601f19908116603f0116810190828211818310171562000298576200029862000228565b81604052838152602092508683858801011115620002b557600080fd5b600091505b83821015620002d95785820183015181830184015290820190620002ba565b83821115620002eb5760008385830101525b9695505050505050565b600080600080600060a086880312156200030e57600080fd5b85516001600160401b03808211156200032657600080fd5b6200033489838a016200023e565b965060208801519150808211156200034b57600080fd5b506200035a888289016200023e565b945050604086015160ff811681146200037257600080fd5b6060870151608088015191945092506001600160a01b03811681146200039757600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003fc578160001904821115620003e057620003e0620003a5565b80851615620003ee57918102915b93841c9390800290620003c0565b509250929050565b6000826200041557506001620004b4565b816200042457506000620004b4565b81600181146200043d5760028114620004485762000468565b6001915050620004b4565b60ff8411156200045c576200045c620003a5565b50506001821b620004b4565b5060208310610133831016604e8410600b84101617156200048d575081810a620004b4565b620004998383620003bb565b8060001904821115620004b057620004b0620003a5565b0290505b92915050565b6000620004c8838362000404565b9392505050565b6000816000190483118215151615620004ec57620004ec620003a5565b500290565b60008219821115620005075762000507620003a5565b500190565b600181811c908216806200052157607f821691505b602082108114156200054357634e487b7160e01b600052602260045260246000fd5b50919050565b61088780620005596000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106c4565b60405180910390f35b6100df6100da366004610735565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461075f565b61024a565b604051601281526020016100c3565b6100df610131366004610735565b61026e565b6100f361014436600461079b565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df610175366004610735565b61029f565b6100df610188366004610735565b61031f565b6100f361019b3660046107bd565b61032d565b6060600380546101af906107f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107f0565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b919061082b565b610358565b6060600480546101af906107f0565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b90849061082b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106f1578581018301518582016040015282016106d5565b81811115610703576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461073057600080fd5b919050565b6000806040838503121561074857600080fd5b61075183610719565b946020939093013593505050565b60008060006060848603121561077457600080fd5b61077d84610719565b925061078b60208501610719565b9150604084013590509250925092565b6000602082840312156107ad57600080fd5b6107b682610719565b9392505050565b600080604083850312156107d057600080fd5b6107d983610719565b91506107e760208401610719565b90509250929050565b600181811c9082168061080457607f821691505b6020821081141561082557634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561084c57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122030059eae897a7e5b577ff6e3399eb73d480da47e54ab54e95f24ddac5a7f321364736f6c63430008090033a2646970667358221220f091664a76f8e551f0746c3c97f4a28f5e245f77e7e28daee58d79bf36a5971f64736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000875760003560e01c80638da5cb5b11620000625780638da5cb5b14620000f45780639870d7fe1462000106578063ac8a584a146200011d578063f2fde38b146200013457600080fd5b80630f8c017f146200008c5780636d70f7ae14620000c0578063715018a614620000e8575b600080fd5b620000a36200009d36600462000776565b6200014b565b6040516001600160a01b0390911681526020015b60405180910390f35b620000d7620000d136600462000859565b62000264565b6040519015158152602001620000b7565b620000f262000279565b005b6000546001600160a01b0316620000a3565b620000f26200011736600462000859565b620002b4565b620000f26200012e36600462000859565b620002ef565b620000f26200014536600462000859565b62000327565b6000620001583362000264565b620001c75760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b60648201526084015b60405180910390fd5b60008b8b8b8b8b8b338c8c8c8c604051620001e29062000629565b620001f89b9a99989796959493929190620008a7565b604051809103906000f08015801562000215573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f61c638779dc87761c9f1c14684efec1860715f51623c3cb9a3d27f7cf51c76939060200160405180910390a19b9a5050505050505050505050565b600062000273600183620003c6565b92915050565b6000546001600160a01b03163314620002a65760405162461bcd60e51b8152600401620001be906200096f565b620002b26000620004cb565b565b6000546001600160a01b03163314620002e15760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200051b565b50565b6000546001600160a01b031633146200031c5760405162461bcd60e51b8152600401620001be906200096f565b620002ec816200055f565b6000546001600160a01b03163314620003545760405162461bcd60e51b8152600401620001be906200096f565b6001600160a01b038116620003bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001be565b620002ec81620004cb565b60006001600160a01b0382166200042b5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620001be565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004578282620003c6565b15620004a65760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005286001826200044b565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6200056c600182620005a3565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b620005af8282620003c6565b620006075760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401620001be565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b61241a80620009a583390190565b60008083601f8401126200064a57600080fd5b50813567ffffffffffffffff8111156200066357600080fd5b6020830191508360208285010111156200067c57600080fd5b9250929050565b803560ff811681146200069557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146200069557600080fd5b600082601f830112620006da57600080fd5b8135602067ffffffffffffffff80831115620006fa57620006fa6200069a565b8260051b604051601f19603f830116810181811084821117156200072257620007226200069a565b6040529384528581018301938381019250878511156200074157600080fd5b83870191505b848210156200076b576200075b82620006b0565b8352918301919083019062000747565b979650505050505050565b6000806000806000806000806000806101008b8d0312156200079757600080fd5b8a3567ffffffffffffffff80821115620007b057600080fd5b620007be8e838f0162000637565b909c509a5060208d0135915080821115620007d857600080fd5b620007e68e838f0162000637565b909a509850889150620007fc60408e0162000683565b975060608d0135965060808d0135955060a08d01359150808211156200082157600080fd5b50620008308d828e01620006c8565b93505060c08b013591506200084860e08c01620006b0565b90509295989b9194979a5092959850565b6000602082840312156200086c57600080fd5b6200087782620006b0565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61012081526000620008bf61012083018d8f6200087e565b8281036020840152620008d4818c8e6200087e565b60ff8b166040850152606084018a90526001600160a01b03898116608086015260a0850189905284820360c086015287518083526020808a0194509192919091019060005b818110156200093b578451841683526020948501949092019160010162000919565b505060e085018790526001600160a01b03861661010086015292506200095f915050565b9c9b505050505050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60806040526127106008556009805460ff191660011790553480156200002457600080fd5b506040516200241a3803806200241a8339810160408190526200004791620006eb565b620000523362000292565b6200005d33620002e2565b6200006d576200006d3362000305565b60008411620000e95760405162461bcd60e51b815260206004820152603f60248201527f41677265656d656e743a206e756d626572206f66206e6565646564207769746e60448201527f6573736573206d7573742062652067726561746572207468616e207a65726f0060648201526084015b60405180910390fd5b82518411156200016e5760405162461bcd60e51b815260206004820152604360248201527f41677265656d656e743a2071756f72756d206d757374206265206c657373207460448201527f68616e206f7220657175616c20746f206e756d626572206f66206f70657261746064820152626f727360e81b608482015260a401620000e0565b888888888860405162000181906200052d565b6200019195949392919062000800565b604051809103906000f080158015620001ae573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b0393841617909155600380549091169183169190911790556004849055600782905560005b83518110156200023757620002228482815181106200020e576200020e62000853565b60200260200101516200030560201b60201c565b806200022e8162000869565b915050620001eb565b50620002438562000357565b6002546040516001600160a01b0390911681527f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e9060200160405180910390a150505050505050505062000893565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002ff8260016200042860201b62000a711790919060201c565b92915050565b62000320816001620004ad60201b62000af41790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6000546001600160a01b03163314620003b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000e0565b6001600160a01b0381166200041a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000e0565b620004258162000292565b50565b60006001600160a01b0382166200048d5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620000e0565b506001600160a01b03166000908152602091909152604090205460ff1690565b620004b9828262000428565b15620005085760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401620000e0565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b610de0806200163a83390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200057c576200057c6200053b565b604052919050565b60005b83811015620005a157818101518382015260200162000587565b83811115620005b1576000848401525b50505050565b600082601f830112620005c957600080fd5b81516001600160401b03811115620005e557620005e56200053b565b620005fa601f8201601f191660200162000551565b8181528460208386010111156200061057600080fd5b6200062382602083016020870162000584565b949350505050565b805160ff811681146200063d57600080fd5b919050565b80516001600160a01b03811681146200063d57600080fd5b600082601f8301126200066c57600080fd5b815160206001600160401b038211156200068a576200068a6200053b565b8160051b6200069b82820162000551565b9283528481018201928281019087851115620006b657600080fd5b83870192505b84831015620006e057620006d08362000642565b82529183019190830190620006bc565b979650505050505050565b60008060008060008060008060006101208a8c0312156200070b57600080fd5b89516001600160401b03808211156200072357600080fd5b620007318d838e01620005b7565b9a5060208c01519150808211156200074857600080fd5b620007568d838e01620005b7565b99506200076660408d016200062b565b985060608c015197506200077d60808d0162000642565b965060a08c0151955060c08c01519150808211156200079b57600080fd5b50620007aa8c828d016200065a565b93505060e08a01519150620007c36101008b0162000642565b90509295985092959850929598565b60008151808452620007ec81602086016020860162000584565b601f01601f19169290920160200192915050565b60a0815260006200081560a0830188620007d2565b8281036020840152620008298188620007d2565b60ff969096166040840152505060608101929092526001600160a01b031660809091015292915050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200088c57634e487b7160e01b600052601160045260246000fd5b5060010190565b610d9780620008a36000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063736e66b9116100a2578063e168c3ec11610071578063e168c3ec1461021f578063ed49d2f814610228578063eda4260414610231578063f2fde38b14610244578063fc0c546a1461025757600080fd5b8063736e66b9146101c75780638da5cb5b146101da578063992642e5146101ff578063cf3090121461021257600080fd5b806329dcb0cf116100e957806329dcb0cf146101875780632ae85024146101905780636388749c146101a35780636d70f7ae146101ac578063715018a6146101bf57600080fd5b80630231853a1461011b57806309eef43e146101305780630fb524ce146101685780631703a01814610170575b600080fd5b61012e610129366004610bdf565b61026a565b005b61015361013e366004610bdf565b600a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012e610431565b61017960045481565b60405190815260200161015f565b61017960065481565b61012e61019e366004610bdf565b610627565b61017960085481565b6101536101ba366004610bdf565b610816565b61012e610829565b61012e6101d5366004610c08565b61085d565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161015f565b6003546101e7906001600160a01b031681565b6009546101539060ff1681565b61017960055481565b61017960075481565b61012e61023f366004610c08565b610907565b61012e610252366004610bdf565b6109d6565b6002546101e7906001600160a01b031681565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161029490610c21565b60405180910390fd5b60095460ff16156102c05760405162461bcd60e51b815260040161029490610c56565b60065442116103275760405162461bcd60e51b815260206004820152602d60248201527f41677265656d656e743a2070726f6a65637420646561646c696e65206973206e60448201526c1bdd081c185cdcd959081e595d609a1b6064820152608401610294565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561036b57600080fd5b505afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190610c9c565b60035460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044015b602060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610cb5565b505050565b61043a33610816565b6104a35760405162461bcd60e51b815260206004820152603460248201527f4f70657261746f72526f6c653a2063616c6c657220646f6573206e6f74206861604482015273766520746865204f70657261746f7220726f6c6560601b6064820152608401610294565b336000908152600a602052604090205460ff16156105035760405162461bcd60e51b815260206004820152601860248201527f41677265656d656e743a20616c726561647920766f74656400000000000000006044820152606401610294565b60095460ff1615156001146105695760405162461bcd60e51b815260206004820152602660248201527f41677265656d656e743a20746f6b656e732061726520616c726561647920756e6044820152651b1bd8dad95960d21b6064820152608401610294565b6040513381527f7ce969a18bb6b0fba42c6d9746e7d08eeca4c661809659c91d276456e3153ac09060200160405180910390a1336000908152600a60205260408120805460ff1916600117905560058054916105c483610ced565b919050555060045460055410610625576009805460ff191690556007546105ee9062015180610d08565b6105f89042610d27565b6006556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a15b565b60095460ff161561064a5760405162461bcd60e51b815260040161029490610c56565b6006544211156106aa5760405162461bcd60e51b815260206004820152602560248201527f41677265656d656e743a2070726f6a65637420646561646c696e652069732070604482015264185cdcd95960da1b6064820152608401610294565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610c9c565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190610cb5565b506003546008546001600160a01b039091169063a9059cbb9084906107e590612710906107df908790610b70565b90610b83565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016103da565b6000610823600183610a71565b92915050565b6000546001600160a01b031633146108535760405162461bcd60e51b815260040161029490610c21565b6106256000610b8f565b6000546001600160a01b031633146108875760405162461bcd60e51b815260040161029490610c21565b60095460ff16156108aa5760405162461bcd60e51b815260040161029490610c56565b6108b78162015180610d08565b600660008282546108c89190610d27565b90915550506006546040519081527f9113684b7f99581828413c80e8a4de06d7f9e1f19850a40671ff3cad16ed14ef906020015b60405180910390a150565b6000546001600160a01b031633146109315760405162461bcd60e51b815260040161029490610c21565b6127108110156109a15760405162461bcd60e51b815260206004820152603560248201527f41677265656d656e743a2072617465202f203130303030206d757374206265206044820152746174206c6561737420657175616c20746f206f6e6560581b6064820152608401610294565b60088190556040518181527f46c447fa0e09447aed33bdd5c9a904aefacaa21c929fd30091da12d5f9810949906020016108fc565b6000546001600160a01b03163314610a005760405162461bcd60e51b815260040161029490610c21565b6001600160a01b038116610a655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610294565b610a6e81610b8f565b50565b60006001600160a01b038216610ad45760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610294565b506001600160a01b03166000908152602091909152604090205460ff1690565b610afe8282610a71565b15610b4b5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610294565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6000610b7c8284610d08565b9392505050565b6000610b7c8284610d3f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610bf157600080fd5b81356001600160a01b0381168114610b7c57600080fd5b600060208284031215610c1a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526026908201527f41677265656d656e743a2070726f6a656374206973206e6f742066696e6973686040820152651959081e595d60d21b606082015260800190565b600060208284031215610cae57600080fd5b5051919050565b600060208284031215610cc757600080fd5b81518015158114610b7c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d0157610d01610cd7565b5060010190565b6000816000190483118215151615610d2257610d22610cd7565b500290565b60008219821115610d3a57610d3a610cd7565b500190565b600082610d5c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d4172a1417878ea7c751287dad0c512b6b1a60f498d95de3e2b29ee4b925125464736f6c6343000809003360806040523480156200001157600080fd5b5060405162000de038038062000de08339810160408190526200003491620002f5565b8451859085906200004d90600390602085019062000182565b5080516200006390600490602084019062000182565b5050506200008f818460ff16600a6200007d9190620004ba565b620000899085620004cf565b6200009a565b505050505062000549565b6001600160a01b038216620000f55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001099190620004f1565b90915550506001600160a01b0382166000908152602081905260408120805483929062000138908490620004f1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b82805462000190906200050c565b90600052602060002090601f016020900481019282620001b45760008555620001ff565b82601f10620001cf57805160ff1916838001178555620001ff565b82800160010185558215620001ff579182015b82811115620001ff578251825591602001919060010190620001e2565b506200020d92915062000211565b5090565b5b808211156200020d576000815560010162000212565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025057600080fd5b81516001600160401b03808211156200026d576200026d62000228565b604051601f8301601f19908116603f0116810190828211818310171562000298576200029862000228565b81604052838152602092508683858801011115620002b557600080fd5b600091505b83821015620002d95785820183015181830184015290820190620002ba565b83821115620002eb5760008385830101525b9695505050505050565b600080600080600060a086880312156200030e57600080fd5b85516001600160401b03808211156200032657600080fd5b6200033489838a016200023e565b965060208801519150808211156200034b57600080fd5b506200035a888289016200023e565b945050604086015160ff811681146200037257600080fd5b6060870151608088015191945092506001600160a01b03811681146200039757600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003fc578160001904821115620003e057620003e0620003a5565b80851615620003ee57918102915b93841c9390800290620003c0565b509250929050565b6000826200041557506001620004b4565b816200042457506000620004b4565b81600181146200043d5760028114620004485762000468565b6001915050620004b4565b60ff8411156200045c576200045c620003a5565b50506001821b620004b4565b5060208310610133831016604e8410600b84101617156200048d575081810a620004b4565b620004998383620003bb565b8060001904821115620004b057620004b0620003a5565b0290505b92915050565b6000620004c8838362000404565b9392505050565b6000816000190483118215151615620004ec57620004ec620003a5565b500290565b60008219821115620005075762000507620003a5565b500190565b600181811c908216806200052157607f821691505b602082108114156200054357634e487b7160e01b600052602260045260246000fd5b50919050565b61088780620005596000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106c4565b60405180910390f35b6100df6100da366004610735565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461075f565b61024a565b604051601281526020016100c3565b6100df610131366004610735565b61026e565b6100f361014436600461079b565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df610175366004610735565b61029f565b6100df610188366004610735565b61031f565b6100f361019b3660046107bd565b61032d565b6060600380546101af906107f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107f0565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b919061082b565b610358565b6060600480546101af906107f0565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b90849061082b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106f1578581018301518582016040015282016106d5565b81811115610703576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461073057600080fd5b919050565b6000806040838503121561074857600080fd5b61075183610719565b946020939093013593505050565b60008060006060848603121561077457600080fd5b61077d84610719565b925061078b60208501610719565b9150604084013590509250925092565b6000602082840312156107ad57600080fd5b6107b682610719565b9392505050565b600080604083850312156107d057600080fd5b6107d983610719565b91506107e760208401610719565b90509250929050565b600181811c9082168061080457607f821691505b6020821081141561082557634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561084c57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122030059eae897a7e5b577ff6e3399eb73d480da47e54ab54e95f24ddac5a7f321364736f6c63430008090033a2646970667358221220f091664a76f8e551f0746c3c97f4a28f5e245f77e7e28daee58d79bf36a5971f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1630,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_operators",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Role)1712_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Role)1712_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 1711,
            "contract": "contracts/Factory.sol:Factory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}